jq is a lightweight and flexible command-line JSON processor akin to sed,awk,grep, and friends for JSON data. 
It's written in portable C and has zero runtime dependencies, allowing you to easily slice, filter, map
and transform structured data.

You can install jq with brew install jq command.

jq is built around the concept of filters that work over a stream of JSON. Each filter takes an 
input and emits JSON to standard out. As weâ€™re going to see, there are many predefined filters 
that we can use. We can effortlessly combine these filters using pipes to quickly construct and 
apply complex operations and transformations to our JSON data.

- Prettify json -----> echo '{"Capitals":{"Turkey":"Ankara","Germany":"Berlin","Austria":"Vienna"}}' | jq '.'

- Prettify json file -----> jq '.' capitals.json

- Access Properties -----> echo '{"Capitals":{"Turkey":"Ankara","Germany":"Berlin","Austria":"Vienna"},
                            "Teams":{"Galatasaray":"Turkey","Bayern Munich":"Germany","Rapid Wien":"Austria"}  }' | jq '.Teams'

- Access value in Properties -----> echo '{"Capitals":{"Turkey":"Ankara","Germany":"Berlin","Austria":"Vienna"},
                            "Teams":{"Galatasaray":"Turkey","Bayern Munich":"Germany","Rapid Wien":"Austria"}  }' | jq '.Teams.Galatasaray'

**Note:** Note that if one of the properties has spaces or special characters, we need to wrap the property name in quotes when accessing it from the jq command:
echo '{ "capital city": "Berlin" }' | jq '."capital city"'

- Iterate over Array -----> echo '["Vienna","Graz","Salzburg"]' | jq ".[]"    

- Extract values over Array -----> jq '.[] | .name' capitals.json

- Accessinng by index -----> jq '.[1].name ' capitals.json 

- Slicing an array ----->  echo '[1,2,3,4,5,6,7,8,9,10]' | jq '.[6:9]'

- Getting Keys -----> echo '{"Capitals":{"Turkey":"Ankara","Germany":"Berlin","Austria":"Vienna"}}' | jq '.Capitals | keys'

- Getting Length -----> echo '{"Capitals":{"Turkey":"Ankara","Germany":"Berlin","Austria":"Vienna"}}' | jq '.Capitals | length'

- Mapping Values with has function -----> jq 'map(has("name"))' capitals.json 

- Mapping Values -----> jq 'map(.population+100)' capitals.json 

- Finding minimum in an array -----> jq '[.[].population] | min' capitals.json

- Finding maximum in an array -----> jq '[.[].population] | max' capitals.json

- Filtering values with select -----> jq '.[] | select(.population > 84048000)' capitals.json

- Filtering values with select -----> jq '.[] | select(.capital > " Berlin")' capitals.json



## Resources

- https://www.baeldung.com/linux/jq-command-json

- https://github.com/jqlang/jq